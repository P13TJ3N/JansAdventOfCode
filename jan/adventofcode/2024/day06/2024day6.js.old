// I heavilly copied code from here: https://gist.github.com/straker/ff00b4b49669ad3dec890306d348adc4
// thanks https://gist.github.com/straker, I never animated javascript/html before and this really helped me understand it better.

let resultsList = [];
let resultsList2 = [];
const tekst = "";
const tekst2 = "";

function calculateResult() {
    var inputElement = document.getElementById("inputTextArea");// haal Input waarden op
    var inputText = inputElement.value;
    processInputText(inputText);// verwerk input waarden
    displayResults();// geef resultaat terug aan webpagina en console.log
}
//functions
function arrSum(arr) { 
    return arr.reduce(function(a, b) {
        return a + b;
    }, 0);
}
// get random whole numbers in a specific range
// @see https://stackoverflow.com/a/1527820/2124254
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
    }

// main loop
function processInputText(inputText) {
    //opdracht 1
    let kaart = inputText.split('\n').map(function(x){return x.split("")});
    var grid = 10;
    var count = 0;

    var canvas = document.getElementById('game');
    var context = canvas.getContext('2d');
    canvas.width = (kaart.length)*grid;
    canvas.height = (kaart[0].length)*grid;

    // the canvas width & height, guard x & y, and the obstacle x & y, all need to be a multiples of the grid size in order for collision detection to work
    var guard = {
    x: grid,
    y: grid,

    // guard velocity. moves one grid length every frame in either the x or y direction
    dx: 0,
    dy: -grid,

    // keep track of all grids the guard body occupies
    cells: [],

    // length of the guard. grows when eating an obstacle
    maxCells: 1
    };
    var obstacle = {
    x: 0,
    y: 32
    };

    //find guards and obstacles
    for (rij = 0; rij < kaart.length; rij++) {
        for (kol = 0; kol < kaart.length; kol++) {
            let cel = kaart[rij][kol];
            if(cel === '^'){guard.x = rij*grid; guard.y = kol*grid;};
            if(cel === '#'){};
        };
    };

    // game loop
    function loop() {
    requestAnimationFrame(loop);

    // slow game loop to 15 fps instead of 60 (60/15 = 4)
    if (++count < 4) {
        return;
    }

    count = 0;
    context.clearRect(0,0,canvas.width,canvas.height);

    // move guard by it's velocity
    guard.x += guard.dx;
    guard.y += guard.dy;

    // wrap guard position horizontally on edge of screen
    if (guard.x < 0) {
        guard.x = canvas.width - grid;
    }
    else if (guard.x >= canvas.width) {
        guard.x = 0;
    }

    // wrap guard position vertically on edge of screen
    if (guard.y < 0) {
        guard.y = canvas.height - grid;
    }
    else if (guard.y >= canvas.height) {
        guard.y = 0;
    }

    // keep track of where guard has been. front of the array is always the head
    guard.cells.unshift({x: guard.x, y: guard.y});

    // remove cells as we move away from them
    if (guard.cells.length > guard.maxCells) {
        guard.cells.pop();
    }

    // draw obstacle
    context.fillStyle = 'red';
    context.fillRect(obstacle.x, obstacle.y, grid-1, grid-1);

    // draw guard one cell at a time
    context.fillStyle = 'green';
    guard.cells.forEach(function(cell, index) {

        // drawing 1 px smaller than the grid creates a grid effect in the guard body so you can see how long it is
        context.fillRect(cell.x, cell.y, grid-1, grid-1);

        // guard ate obstacle
        if (cell.x === obstacle.x && cell.y === obstacle.y) {
        guard.maxCells++;

        // canvas is 400x400 which is 25x25 grids
        obstacle.x = getRandomInt(0, 25) * grid;
        obstacle.y = getRandomInt(0, 25) * grid;
        }

        // check collision with all cells after this one (modified bubble sort)
        for (var i = index + 1; i < guard.cells.length; i++) {

        // guard occupies same space as a body part. reset game
        if (cell.x === guard.cells[i].x && cell.y === guard.cells[i].y) {
            guard.x = 160;
            guard.y = 160;
            guard.cells = [];
            guard.maxCells = 4;
            guard.dx = grid;
            guard.dy = 0;

            obstacle.x = getRandomInt(0, 25) * grid;
            obstacle.y = getRandomInt(0, 25) * grid;
        }
        }
    });
    }

    // start the game
    requestAnimationFrame(loop);
}

function displayResults() {
    let resultsListSum = arrSum(resultsList);console.log(`${tekst} : ${resultsListSum}`);
    let resultsListSum2 = arrSum(resultsList2);console.log(`${tekst2} : ${resultsListSum2}`);
    
    //stuur info naar HTML document output
    var outputElement = document.getElementById("outputTextArea");
    outputElement.value = `${tekst} : ${resultsListSum} \n${tekst2}: ${resultsListSum2}`;
};